{"version":3,"sources":["index.js","src/lib/method.js","src/lib/parameter.js","src/lib/interceptors.js","src/lib/mixin.js","utils/common.js","src/lib/intercept.js","src/CopyProxy.js","utils/finally.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,AGTA,AFMA;AFOA,AGTA,AFMA,AGTA,AFMA;AFOA,AGTA,AFMA,AGTA,AFMA;AFOA,AGTA,AFMA,AGTA,AFMA,AGTA;ALgBA,AGTA,AFMA,AGTA,AFMA,AGTA;ALgBA,AGTA,AFMA,AGTA,AFMA,AGTA;ALgBA,AMlBA,AHSA,AFMA,AGTA,AFMA,AGTA;ALgBA,AMlBA,AHSA,AFMA,AGTA,AFMA,AGTA;ALgBA,AMlBA,AHSA,ACHA,AFMA,AGTA;ALgBA,AOrBA,ADGA,AHSA,ACHA,AFMA,AGTA;ALgBA,AOrBA,ADGA,AHSA,ACHA,AFMA,AGTA;ALgBA,AOrBA,ADGA,AHSA,ACHA,ACHA;ALgBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AFMA,AIZA;ARyBA,AOrBA,ADGA,AENA;ARyBA,AOrBA,ADGA,AENA;ARyBA,AOrBA,ADGA;ANmBA,AOrBA,ADGA;ANmBA,AOrBA,ADGA;ANmBA,AOrBA,ADGA;ANmBA,AOrBA,ADGA;ANmBA,AOrBA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('./src/lib/method.js');var method = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('./src/lib/parameter.js');var parameter = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('./src/lib/mixin.js');var mixin = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('./src/lib/intercept.js');var intercept = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('./src/CopyProxy');var CopyProxy = __REQUIRE_DEFAULT__(__TEMP__);\r\nvar __TEMP__ = require('./utils/finally');var getFinally = __REQUIRE_DEFAULT__(__TEMP__);\r\ngetFinally();\r\n/**\r\n * options：Object,默认Object，设置默认的request参数\r\n * proxt：Boolean，默认为true，是否将wx的所有api都封装成Promise\r\n */\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function Api(options = {}, proxy = true) {\r\n  //默认为get\r\n  function api(url, data) {\r\n    return this.method({ url, data, method: api.defaults.method })\r\n  }\r\n  //导入method方法\r\n  method(api)\r\n  //设置默认参数\r\n  parameter(api)\r\n  //混入默认配置\r\n  mixin(api)\r\n  //导入拦截方法\r\n  intercept(api)\r\n  /**\r\n  *options 设置defaults\r\n  */\r\n  api.build = function (options, proxy) {\r\n    let cp = new CopyProxy(this);\r\n    let obj = cp.clone()\r\n    if (proxy)\r\n      cp.make(obj, 'wx', key => (url, data) => this.method({ url, data, api: key }));\r\n    obj.options(options)\r\n    obj.create = Api;\r\n    return obj\r\n  }\r\n  api.options = function (options) {\r\n    Object.keys(options).forEach(val => this.defaults[val] = options[val])\r\n  }\r\n  return api.build(options, proxy)\r\n};","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function method(api){\r\n  //所有request支持method\r\n  const config = [\r\n    'get',\r\n    'post',\r\n    'put',\r\n    'delete',\r\n    'options',\r\n    'head',\r\n    'trace',\r\n    'connect'\r\n  ]\r\n  config.forEach(val => {\r\n    api[val] = (url, data) => api.method({ url, data, method: val })\r\n  })\r\n};\r\n","var __TEMP__ = require('./interceptors.js');var interceptors = __REQUIRE_DEFAULT__(__TEMP__);\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function parameter(api){\r\n  api.defaults = {\r\n    url: '',\r\n    method: 'get',\r\n    dataType: 'json',\r\n    responseType: 'text',\r\n    header: {\r\n      'content-type': \"application/json\"\r\n    }\r\n  }\r\n  api.interceptors = {\r\n    response: interceptors(),\r\n    request: interceptors(),\r\n  }\r\n};\r\n","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function interceptors() {\r\n  return {\r\n    use(resolve, reject) {\r\n      if (typeof resolve === 'function') this.success = resolve;\r\n      if (typeof reject === 'function') this.error = reject;\r\n    },\r\n    success(config) {\r\n      return config\r\n    },\r\n    error(error) {\r\n      return error;\r\n    }\r\n  }\r\n};\r\n","var __TEMP__ = require('../../utils/common');var isProtocol = __TEMP__['isProtocol'];\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function mixin(api){\r\n  api.dataMerging = function (fnData, url, data) {\r\n    if (typeof url === 'string') {\r\n      fnData.url = this.pathMerge(url)\r\n      fnData.data = data;\r\n      this.fnDefaults(fnData)\r\n    } else if (typeof url === 'object') {\r\n      url.url = this.pathMerge(url.url)\r\n      Object.assign(fnData, url)\r\n      this.fnDefaults(fnData)\r\n    }\r\n  }\r\n  //判断是否需要添加默认值url\r\n  api.pathMerge = function (url) {\r\n    return isProtocol(url) ? url : this.defaults.url + url\r\n  }\r\n  api.fnDefaults = function (fnData) {\r\n    ['dataType', 'responseType', 'header'].forEach(val => fnData[val] = fnData[val] ? fnData[val] : this.defaults[val])\r\n  }\r\n};","/**\r\n * 克隆一个全新对象，但不能对dom对象和function\r\n * */\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var newObj = exports.newObj = obj => JSON.parse(JSON.stringify(obj));\r\n//判断开头是否http://或者https://的\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var isProtocol = exports.isProtocol = str => {\r\n  let b = new RegExp('^http[s]?://')\r\n  return b.test(str)\r\n};","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function intercept(api){\r\n  //包装成Promise返回\r\n  api.method = function ({ url, data, method, api = 'request' }) {\r\n    //为了方便用户传值\r\n    try {\r\n      //拦截发起请求\r\n      return new Promise((resolve, reject) => {\r\n        //拦截 HTTPS \r\n        let fnData = this.unite({ url, data, method, resolve, reject });\r\n        fnData = this.interceptors.request.success(fnData)\r\n        wx[api](fnData)\r\n      });\r\n    } catch (e) {\r\n      return this.interceptors.request.error(e)\r\n    }\r\n  }\r\n  //拦截 HTTPS ，返回参数\r\n  api.unite = function ({ url, data, method, resolve, reject }) {\r\n    let fnData = {\r\n      success: res => {\r\n        let data = this.interceptors.response.success(res)\r\n        resolve(data)\r\n      },\r\n      fail: res => {\r\n        let data = this.interceptors.response.error(res)\r\n        reject(data)\r\n      }\r\n    }\r\n    fnData.method = method;\r\n    this.dataMerging(fnData, url, data)\r\n    return fnData\r\n  }\r\n};\r\n","// import { newObj } from '../utils/common'\r\n//用以代理abi，生成wx.api的Promise\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = class CopyProxy {\r\n  constructor(stuff) {\r\n    this.stuff = stuff;\r\n  }\r\n  clone() {\r\n    //克隆本体函数\r\n    let obj = typeof this.stuff === 'function'\r\n      ? this.stuff.bind(this.stuff) : {}\r\n\r\n    Object.assign(obj, this.stuff)\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * obj\r\n   * obj要代理的key\r\n   * 触发的函数(返回代理的key)\r\n   * 通过Proxy自动生成函数\r\n   * ---------------------\r\n   * proxy相对于definProperty是惰性的，触发get有返回key值参数，\r\n   * 而definProperty触发get是没有key返回的。所以一开始就需要循环出所有的key来劫持\r\n   * */\r\n  make(obj = {}, soil, fn) {\r\n    if (typeof Proxy === 'function') {\r\n      return this.proxy(obj, soil, fn)\r\n    } else {\r\n      return this.defineProperty(obj, soil, fn)\r\n    }\r\n  }\r\n  proxy(obj, soil, fn) {\r\n    this.stuff[soil] = {};\r\n    obj[soil] = new Proxy(this.stuff[soil], {\r\n      get(target, key, receiver) {\r\n        if (!target[key]) target[key] = fn(key)\r\n        // receiver会循环\r\n        return Reflect.get(target, key, receiver);\r\n      }\r\n    })\r\n    return obj\r\n  }\r\n  defineProperty(obj, soil, fn) {\r\n    let soilKey = {}\r\n    obj[soil] = {}\r\n    Object.keys(wx).forEach(wxApi => {\r\n      Object.defineProperty(obj[soil], wxApi, {\r\n        get() {\r\n          if (!soilKey[wxApi]) soilKey[wxApi] = fn(wxApi)\r\n          return soilKey[wxApi]\r\n        },\r\n      })\r\n    })\r\n    return obj\r\n  }\r\n};","function getFinally(){\r\n  Promise.prototype.finally = function (callback) {\r\n    let P = this.constructor;\r\n    return this.then(\r\n      value => P.resolve(callback()).then(() => value),\r\n      reason => P.resolve(callback()).then(() => { throw reason })\r\n    );\r\n  };\r\n}\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = getFinally;\r\n"]}